[["index.html", "NAB RShiny Workshop 1 Overview 1.1 Workshop Format 1.2 Agenda 1.3 Preparation for the workshop 1.4 Resources", " NAB RShiny Workshop Ben Block (Tetra Tech) 2021-11-12 1 Overview Greetings! This book is intended to be a virtual hand-out that provides all the code necessary to participate in the Northeast Aquatic Biologists (NAB) RShiny Workshop scheduled for December 08, 2021. I hope you find this format simple and helpful as you follow along during the workshop. The GitHub repository that contains the underlying code as well as copies of the PowerPoint presentations used during the workshop can be found here! Shiny is an R package that makes it easy to build interactive web apps straight from R. You can host standalone apps on a webpage or embed them in R Markdown documents or build dashboards. You can also extend your Shiny apps with CSS themes, htmlwidgets, and JavaScript actions. This workshop will cover the fundamentals wherein you will build a solid theoretical and practical foundation from which you can build ever better apps! 1.1 Workshop Format This book is separated by individual lessons which correspond to the workshop discussions we will be having. Here are the four lessons: Lesson 1: How to build a Shiny app. In this lesson, we discuss the basics of RShiny including the development of the server and user interface (UI). Lesson 2: How to customize reactions. Reactivity is the essence of RShiny and must be understood to create responsive Shiny apps. Lesson 3: How to customize appearance. Defaults work for a while but sometimes you may want to zhoosh up an app and make the UI more appealing. Lesson 4: Share your apps.Note, no code is provided for this lesson, but the lesson focuses on how to share your apps with colleagues, collaborators, and the public. 1.2 Agenda 8:00 AM - 4:00 PM DECEMBER 08, 2021 8:00  8:30 AM Introduction and Demo 8:30  10:00 AM Lesson 1: How to build a shiny app 10:00  10:15 AM Break 10:15 AM  12:00 PM Lesson 2: How to customize reactions 12:00  1:00 PM Lunch Break 1:00  2:30 PM Lesson 3: How to customize appearance 2:30  2:45 PM Lesson 4: Share your apps 2:45  3:00 PM Conclusions 3:00  4:00 PM Optional: Q&amp;A and roundtable discussion 1.3 Preparation for the workshop We expect workshop attendees to be familiar with R and have both R and RStudio downloaded to their computers prior to the beginning of the workshop. R and RStudio are absolutely necessary for participation. Also, there are three packages that you will need to make surer you have downloaded prior to the workshop. Please follow these instructions: Open RStudio Copy and execute the following code: Note, installation of new packages may take some time. package.vec &lt;- c(&quot;shiny&quot;, &quot;bslib&quot;, &quot;thematic&quot;) install.packages(package.vec) 1.4 Resources The majority of the workshop content was adapted from content published by RStudio creators. These include the following resources: RStudios RShiny tutorial Garrett Grolemund, 2015 Licensed under a Creative Commons License Mastering Shiny Hadley Wickham, 2020 Licensed under a Creative Commons License Other useful resources https://shiny.rstudio.com/tutorial/ https://shiny.rstudio.com/gallery/ https://shiny.rstudio.com/images/shiny-cheatsheet.pdf https://stackoverflow.com/questions/tagged/shiny https://datacamp.com/ "],["lesson-1.html", " 2 Lesson 1 2.1 My first app 2.2 Input example 2.3 Practice Problem #1 2.4 Practice Problem #2", " 2 Lesson 1 How to build an RShiny app! 2.1 My first app #L01_Script01_MyFirstApp library(shiny) ui &lt;- fluidPage( &quot;Hello, world!&quot; ) server &lt;- function(input, output, session) { } shinyApp(ui, server) 2.2 Input example # L01_Script02_InputExample library(shiny) ui &lt;- fluidPage( sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100), plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output, session) { output$hist &lt;- renderPlot({ hist(rnorm(input$num)) }) } shinyApp(ui, server) 2.3 Practice Problem #1 2.3.1 Solution # L01_Script03_PPSolution01 library(shiny) ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText({ paste0(&quot;Hello &quot;, input$name) }) } shinyApp(ui, server) 2.4 Practice Problem #2 2.4.1 Question # L01_Script04_PPQuestion02 library(shiny) ui &lt;- fluidPage( sliderInput(&quot;x&quot;, label = &quot;If x is&quot;, min = 1, max = 50, value = 30), sliderInput(&quot;y&quot;, label = &quot;If y is&quot;, min = 1, max = 25, value = 8), &quot;then x times y is&quot;, textOutput(&quot;product&quot;) ) server &lt;- function(input, output, session) { output$product &lt;- renderText({ x * y }) } shinyApp(ui, server) 2.4.2 Solution # L01_Script05_PPSolution02 library(shiny) ui &lt;- fluidPage( sliderInput(&quot;x&quot;, label = &quot;If x is&quot;, min = 1, max = 50, value = 30), sliderInput(&quot;y&quot;, label = &quot;If y is&quot;, min = 1, max = 25, value = 8), &quot;then x times y is&quot;, textOutput(&quot;product&quot;) ) server &lt;- function(input, output, session) { output$product &lt;- renderText({ input$x * input$y }) } shinyApp(ui, server) "],["lesson-2.html", " 3 Lesson 2 3.1 Example #1 3.2 render*() 3.3 reactive() 3.4 isolate() 3.5 observeEvent() 3.6 eventReactive() 3.7 reactiveValues() 3.8 Practice Problem #2 3.9 Practice Problem #3", " 3 Lesson 2 How to customize reactions 3.1 Example #1 #L02_Script01_Example1 library(shiny) ui &lt;- fluidPage( textInput(&quot;name&quot;, &quot;What&#39;s your name?&quot;), textOutput(&quot;greeting&quot;) ) server &lt;- function(input, output, session) { output$greeting &lt;- renderText({ paste0(&quot;Hello &quot;, input$name, &quot;!&quot;) }) } shinyApp(ui, server) 3.2 render*() #L02_Script02_Render library(shiny) ui &lt;- fluidPage( sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100), textInput(inputId = &quot;title&quot;, label = &quot;Write a title&quot;, value = &quot;Histogram of Random Normal Values&quot;), plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$num), main = input$title) }) } shinyApp(ui = ui, server = server) 3.3 reactive() #L02_Script03_Reactive library(shiny) ui &lt;- fluidPage( sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100), plotOutput(&quot;hist&quot;), verbatimTextOutput(&quot;stats&quot;) ) server &lt;- function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$num)) }) output$stats &lt;- renderPrint({ summary(rnorm(input$num)) }) } shinyApp(ui = ui, server = server) 3.4 isolate() #L02_Script04_Isolate library(shiny) ui &lt;- fluidPage( sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100), textInput(inputId = &quot;title&quot;, label = &quot;Write a title&quot;, value = &quot;Histogram of Random Normal Values&quot;), plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$num) , main = isolate({input$title})) }) } shinyApp(ui = ui, server = server) 3.5 observeEvent() #L02_Script05_observeEvent library(shiny) ui &lt;- fluidPage( actionButton(inputId = &quot;clicks&quot;, label = &quot;Click me&quot;) ) server &lt;- function(input, output) { observeEvent(input$clicks , showNotification(input$clicks)) } shinyApp(ui = ui, server = server) 3.6 eventReactive() #L02_Script06_eventReactive library(shiny) ui &lt;- fluidPage( sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100), actionButton(inputId = &quot;go&quot;, label = &quot;Update&quot;), plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output) { data &lt;- eventReactive(input$go, { rnorm(input$num) }) output$hist &lt;- renderPlot({ hist(data()) }) } shinyApp(ui = ui, server = server) 3.7 reactiveValues() #L02_Script07_reactiveValues library(shiny) ui &lt;- fluidPage( actionButton(&quot;up&quot;, &quot;up&quot;), actionButton(&quot;down&quot;, &quot;down&quot;), textOutput(&quot;n&quot;) ) server &lt;- function(input, output, session) { r &lt;- reactiveValues(n = 0) observeEvent(input$up, { r$n &lt;- r$n + 1 }) observeEvent(input$down, { r$n &lt;- r$n - 1 }) output$n &lt;- renderText(r$n) } shinyApp(ui = ui, server = server) 3.8 Practice Problem #2 3.8.1 Solution #L02_Script08_PPSolution02 library(shiny) ui &lt;- fluidPage( numericInput(&quot;x&quot;, &quot;x&quot;, value = 50, min = 0, max = 100), actionButton(&quot;capture&quot;, &quot;capture&quot;), textOutput(&quot;out&quot;) ) server &lt;- function(input, output) { output$out &lt;- eventReactive(input$capture, { input$x }) } shinyApp(ui = ui, server = server) 3.9 Practice Problem #3 3.9.1 Solution #L02_Script09_PPSolution03 library(shiny) ui &lt;- fluidPage( actionButton(inputId = &quot;norm&quot;, label = &quot;Normal&quot;), actionButton(inputId = &quot;unif&quot;, label = &quot;Uniform&quot;), plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output) { rv &lt;- reactiveValues(data = rnorm(100)) observeEvent(input$norm, { rv$data &lt;- rnorm(100) }) observeEvent(input$unif, { rv$data &lt;- runif(100) }) output$hist &lt;- renderPlot({ hist(rv$data) }) } shinyApp(ui = ui, server = server) "],["lesson-3.html", " 4 Lesson 3 4.1 Practice Problem #1 4.2 Practice Problem #2", " 4 Lesson 3 How to customize appearance 4.1 Practice Problem #1 4.1.1 Solution #L03_Script01_PPSolution01 library(shiny) library(bslib) library(thematic) thematic_shiny(font = &quot;auto&quot;) ui &lt;- fluidPage(theme = bs_theme( bg = &quot;#045c7c&quot;, fg = &quot;#ffe2a9&quot;, primary = &quot;#a4c37b&quot;) ,sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100) ,textInput(inputId = &quot;title&quot;, label = &quot;Write a title&quot;, value = &quot;Histogram of Random Normal Values&quot;) ,plotOutput(&quot;hist&quot;) ) server &lt;- function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$num), main = input$title) }) } shinyApp(ui = ui, server = server) 4.2 Practice Problem #2 4.2.1 Solution #L03_Script02_PPSolution02 library(shiny) library(bslib) library(thematic) thematic_shiny(font = &quot;auto&quot;) ui &lt;- fluidPage(theme = bs_theme( bg = &quot;#045c7c&quot;, fg = &quot;#ffe2a9&quot;, primary = &quot;#a4c37b&quot;) # End ~ bs_theme , sidebarLayout( sidebarPanel( sliderInput(inputId = &quot;num&quot;, label = &quot;Choose a number&quot;, value = 25, min = 1, max = 100) ,textInput(inputId = &quot;title&quot;, label = &quot;Write a title&quot;, value = &quot;Histogram of Random Normal Values&quot;) ), # End ~ sidebarPanel mainPanel( plotOutput(&quot;hist&quot;) ) # End ~ mainPanel ) # End ~ sidebarLayout ) # End ~ fluidPage server &lt;- function(input, output) { output$hist &lt;- renderPlot({ hist(rnorm(input$num), main = input$title) }) } shinyApp(ui = ui, server = server) "],["acknowledgments.html", " 5 Acknowledgments", " 5 Acknowledgments We would like to thank the collaborative staff who worked on producing the content for this workshop including Ben Block, Erik Leppo, and Ben Jessup from Tetra Tech and Maryann Dugan from NEIWPCC. This project has been funded wholly or in part by the United States Environmental Protection Agency under assistance agreement (I00199120-106) to NEIWPCC. The contents of this document do not necessarily reflect the views and policies of NEIWPCC or the EPA, nor does NEIWPCC or the EPA endorse trade names or recommend the use of commercial products mentioned in this document. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
